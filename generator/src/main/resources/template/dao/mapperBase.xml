<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>mapper</name>
	<filePath>src/main/resources/mapper/${moduleName}/${subModuleName}/base</filePath>
	<fileName>${ClassName}MapperBase.xml</fileName>
	<content><![CDATA[
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="${packageName}.${moduleName}.dao<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Dao">

	<resultMap id="BaseResultMap" type="${packageName}.${moduleName}.entity<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}">
    	<#list table.columnList as c>
	<#if c.isPk == "1">
		<id column="${c.name}" property="${c.javaFieldId}" />
	<#else>
		<result column="${c.name}" property="${c.javaFieldId}" />
	</#if>
		</#list>
  	</resultMap>

    <#-- 输出字段列 -->
	<sql id="Base_Column_List">
<#assign columnField>
<#list table.columnList as c>
		${c.name},
</#list>
	</#assign>
${columnField?substring(0, columnField?last_index_of(","))}
	</sql>

	<select id="get" resultMap="BaseResultMap">
		SELECT 
			<include refid="Base_Column_List"/>
		FROM ${table.name}
	<#list table.columnList as c>
	<#if c.isPk == "1">
		WHERE ${c.name} = ${"#"}{id}
	</#if>
	<#break>
	</#list>
	</select>
	
	<select id="list" resultMap="BaseResultMap">
		SELECT 
			<include refid="Base_Column_List"/>
		FROM ${table.name} t
		<where>
			<#if table.delFlagExists>t.valid = 1</#if>
			<#list table.columnList as c>
				<#if (c.isQuery?? && c.isQuery == "1") || (table.parentExists && table.parentTableFk == c.name)>
					<#if c.queryType ?? && c.queryType == 'between'>
			<if test="begin${c.simpleJavaField?cap_first} != null and end${c.simpleJavaField?cap_first} != null <#if c.simpleJavaField != c.javaFieldId>and begin${c.javaFieldId?cap_first} != null and end${c.javaFieldId?cap_first} != null </#if>and begin${c.javaFieldId?cap_first} != '' and end${c.javaFieldId?cap_first} != ''">
					<#else>
			<if test="${c.simpleJavaField} != null<#if c.simpleJavaField != c.javaFieldId> and ${c.javaFieldId} != null</#if> and ${c.javaFieldId} != ''">
					</#if>
					<#if c.queryType ?? && c.queryType == 'between'>
				AND t.${c.name} BETWEEN ${"#"}{begin${c.simpleJavaField?cap_first}} AND ${"#"}{end${c.simpleJavaField?cap_first}}
					<#elseif c.queryType ?? && c.queryType == 'like'>
				AND t.${c.name} LIKE
					concat('%',${"#"}{${c.javaFieldId}},'%')
					<#elseif c.queryType ?? && c.queryType == 'left_like'>
				AND t.${c.name} LIKE
					concat('%',${"#"}{${c.javaFieldId}})
					<#elseif c.queryType ?? && c.queryType == 'right_like'>
				AND t.${c.name} LIKE
					concat(${"#"}{${c.javaFieldId}},'%')
					<#else>
				AND t.${c.name} ${c.queryType} ${"#"}{${c.javaFieldId}}
					</#if>
			</if>
				</#if>
			</#list>
		</where>
		<#if table.createDateExists>
		ORDER BY t.create_time ASC
		<#elseif table.updateDateExists>
		ORDER BY t.update_time DESC
		</#if>
	</select>

	<select id="listPage" resultMap="BaseResultMap" parameterType="Page">
		SELECT
			<include refid="Base_Column_List"/>
		FROM ${table.name} t
		<where>
			<#if table.delFlagExists>t.valid = 1</#if>
			<if test="condition != null">
			<#list table.columnList as c>
				<#if (c.isQuery?? && c.isQuery == "1") || (table.parentExists && table.parentTableFk == c.name)>
					<#if c.queryType ?? && c.queryType == 'between'>
			<if test="begin${c.simpleJavaField?cap_first} != null and end${c.simpleJavaField?cap_first} != null <#if c.simpleJavaField != c.javaFieldId>and begin${c.javaFieldId?cap_first} != null and end${c.javaFieldId?cap_first} != null </#if>and begin${c.javaFieldId?cap_first} != '' and end${c.javaFieldId?cap_first} != ''">
					<#else>
			<if test="condition.${c.simpleJavaField} != null<#if c.simpleJavaField != c.javaFieldId> and ${c.javaFieldId} != null</#if> and condition.${c.javaFieldId} != ''">
					</#if>
					<#if c.queryType ?? && c.queryType == 'between'>
				AND t.${c.name} BETWEEN ${"#"}{begin${c.simpleJavaField?cap_first}} AND ${"#"}{end${c.simpleJavaField?cap_first}}
					<#elseif c.queryType ?? && c.queryType == 'like'>
				AND t.${c.name} LIKE
					concat('%',${"#"}{condition.${c.javaFieldId}},'%')
					<#elseif c.queryType ?? && c.queryType == 'left_like'>
				AND t.${c.name} LIKE
					concat('%',${"#"}{condition.${c.javaFieldId}})
					<#elseif c.queryType ?? && c.queryType == 'right_like'>
				AND t.${c.name} LIKE
					concat(${"#"}{condition.${c.javaFieldId}},'%')
					<#else>
				AND t.${c.name} ${c.queryType} ${"#"}{condition.${c.javaFieldId}}
					</#if>
			</if>
				</#if>
			</#list>
			</if>
		</where>
		<choose>
			<when test="orderBy != null and orderBy != ''">
				ORDER BY ${"$"}{orderBy}
			</when>
			<otherwise>
				<#if table.createDateExists>
				ORDER BY t.create_time ASC
				<#elseif table.updateDateExists>
				ORDER BY t.update_time DESC
				</#if>
			</otherwise>
		</choose>
	</select>
	
	<insert id="save">
		INSERT INTO ${table.name}(
		<#assign insertField>
			<#list table.columnList as c>
				<#if c.isInsert?? && c.isInsert == "1">
			${c.name},
				</#if>
			</#list>
		</#assign>
${insertField?substring(0, insertField?last_index_of(","))}
		) VALUES (
		<#assign insertJavaField>
			<#list table.columnList as c>
				<#if c.isInsert?? && c.isInsert == "1">
			${"#"}{${c.javaFieldId}},
				</#if>
			</#list>
		</#assign>
${insertJavaField?substring(0, insertJavaField?last_index_of(","))}
		)
	</insert>
	
	<update id="update">
		UPDATE ${table.name}
		<set>
				<#list table.columnList as c>
					<#if c.isEdit?? && c.isEdit == "1">
			<if test="${c.javaFieldId} != null">
				${c.name} = ${"#"}{${c.javaFieldId}},
			</if>
					</#if>
				</#list>
		</set>
		<#list table.columnList as c>
	<#if c.isPk == "1">
		WHERE ${c.name} = ${"#"}{${c.javaFieldId}}
	</#if>
	<#break>
	</#list>
	</update>

	<update id="updateAll">
		UPDATE ${table.name}
		<set>
				<#list table.columnList as c>
					<#if c.isEdit?? && c.isEdit == "1">
				${c.name} = ${"#"}{${c.javaFieldId}},
					</#if>
				</#list>
		</set>
		<#list table.columnList as c>
	<#if c.isPk == "1">
		WHERE ${c.name} = ${"#"}{${c.javaFieldId}}
	</#if>
	<#break>
	</#list>
	</update>

	<delete id="delete" parameterType="java.lang.Boolean">
	<choose>
		<when test="logic">
			UPDATE ${table.name}
			SET valid = "0"
		<#list table.columnList as c>
		<#if c.isPk == "1">
			WHERE ${c.name} = ${"#"}{id}
		</#if>
		<#break>
		</#list>
		</when>
		<otherwise>
			DELETE FROM ${table.name}
		<#list table.columnList as c>
		<#if c.isPk == "1">
			WHERE ${c.name} = ${"#"}{id}
		</#if>
		<#break>
		</#list>
		</otherwise>
	</choose>
	</delete>

</mapper>]]>
	</content>
</template>